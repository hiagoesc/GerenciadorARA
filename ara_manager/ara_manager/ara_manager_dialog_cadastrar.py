# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GerenciadorARADialog
                                 A QGIS plugin
 Este plugin auxilia no gerenciamento de banco de dados de Alvarás Responsáveis Automáticos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-17
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Hiago Cardoso Arquitetura e Urbanismo
        email                : hiagocardoso.arq@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import re
import requests
import math

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsFeature, QgsGeometry, QgsPointXY, QgsExpression, QgsFeatureRequest
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMessageBox
from .ara_manager_dialog_cadastrar_ui import Ui_GerenciadorARADialogCadastrar
from . import resources_rc
from .utils import buscar_requerente_por_cpf_cnpj, buscar_tecnico_por_registro

class CadastroARADialog(QtWidgets.QDialog, Ui_GerenciadorARADialogCadastrar):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

        # Preencher o ano atual no spinBox Ano e definir intervalo
        ano_atual = QDate.currentDate().year()
        self.spinBoxAno.setValue(ano_atual)
        self.spinBoxAno.setRange(1900, ano_atual)

        # Atualiza o campo de data para a data atual
        self.dateEditAbertura.setDate(QDate.currentDate())

        # Atualiza o campo de nome do requerente caso o cpf/cnpj digitado já esteja cadastrado
        self.lineEditRequerenteCPF_CNPJ.editingFinished.connect(self.ao_digitar_cpf_cnpj)

        self.lineEditAutorProjetoRegistro.editingFinished.connect(self.ao_digitar_registro)
        self.lineEditResponsavelExecucaoRegistro.editingFinished.connect(self.ao_digitar_registro)

        # Formata os dígitos da inscrição digitados
        self.lineEditQuadra.editingFinished.connect(self.formatar_quadra)
        self.lineEditLote.editingFinished.connect(self.formatar_lote)
        self.lineEditUnidade.editingFinished.connect(self.verificar_unidade)

        # Atualiza campo da inscrição completa após digitação de setor, quadra, lote e unidade
        self.lineEditSetor.textChanged.connect(self.atualizar_inscricao)
        self.lineEditQuadra.textChanged.connect(self.atualizar_inscricao)
        self.lineEditLote.textChanged.connect(self.atualizar_inscricao)
        self.lineEditUnidade.textChanged.connect(self.atualizar_inscricao)

        # Atualiza campos de setor, quadra, lote e unidade após digitação da inscrição completa
        self.lineEditInscricao.editingFinished.connect(self.atualizar_campos_a_partir_da_inscricao)

        # Atualiza o campo de endereço após consulta do CEP em API de CEP
        self.lineEditCEP.editingFinished.connect(self.preencher_logradouro)

        self.desativar_campos_execucao()

        # Atualiza campos de registro do profissional autor do projeto a partir da formação selecionada no redio button
        self.radioButtonAutorProjetoProfissionalEngCivil.toggled.connect(self.atualizar_label_registro_autor_projeto)
        self.radioButtonAutorProjetoProfissionalArquitetura.toggled.connect(self.atualizar_label_registro_autor_projeto)
        self.radioButtonAutorProjetoProfissionalEdificacoes.toggled.connect(self.atualizar_label_registro_autor_projeto)

        self.radioButtonResponsavelExecucaoProfissionalEngCivil.toggled.connect(self.atualizar_label_registro_responsavel_execucao)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.toggled.connect(self.atualizar_label_registro_responsavel_execucao)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.toggled.connect(self.atualizar_label_registro_responsavel_execucao)

        self.radioButtonAutorProjetoProfissionalEngCivil.toggled.connect(self.atualizar_execucao)
        self.radioButtonAutorProjetoProfissionalArquitetura.toggled.connect(self.atualizar_execucao)
        self.radioButtonAutorProjetoProfissionalEdificacoes.toggled.connect(self.atualizar_execucao)

        # Conectar os campos de Autor para atualizar automaticamente Execução
        self.lineEditAutorProjetoRegistro.textChanged.connect(self.atualizar_execucao)
        self.lineEditAutorProjetoInscricao.textChanged.connect(self.atualizar_execucao)
        self.lineEditAutorProjetoNome.textChanged.connect(self.atualizar_execucao)
        self.lineEditAutorProjetoEmail.textChanged.connect(self.atualizar_execucao)
        
        # Conectar o checkbox de "Autor do Projeto" ao sincronizador
        self.checkBoxAutorProjetoDistinto.toggled.connect(self.sincronizar_profissionais_distintos)
        self.checkBoxResponsavelExecucaoDistinto.toggled.connect(self.dessincronizar_profissionais_distintos)

        # Botões de navegação entre abas e de cancelamento
        self.pushButtonVoltarProcesso.setEnabled(False)
        self.pushButtonAvancarProcesso.clicked.connect(self.ir_para_aba_local)
        self.pushButtonLimparProcesso.clicked.connect(self.confirmar_limpeza)
        self.pushButtonSalvarProcesso.clicked.connect(self.confirmar_salvar)
        self.pushButtonCancelarProcesso.clicked.connect(self.close)

        self.pushButtonVoltarLocal.clicked.connect(self.ir_para_aba_processo)
        self.pushButtonAvancarLocal.clicked.connect(self.ir_para_aba_projeto)
        self.pushButtonLimparLocal.clicked.connect(self.confirmar_limpeza)
        self.pushButtonSalvarLocal.clicked.connect(self.confirmar_salvar)
        self.pushButtonCancelarLocal.clicked.connect(self.close)

        self.pushButtonVoltarProjeto.clicked.connect(self.ir_para_aba_local)
        self.pushButtonAvancarProjeto.clicked.connect(self.ir_para_aba_tecnico)
        self.pushButtonLimparProjeto.clicked.connect(self.confirmar_limpeza)
        self.pushButtonSalvarProjeto.clicked.connect(self.confirmar_salvar)
        self.pushButtonCancelarProjeto.clicked.connect(self.close)

        self.pushButtonVoltarTecnico.clicked.connect(self.ir_para_aba_projeto)
        self.pushButtonAvancarTecnico.setEnabled(False)
        self.pushButtonLimparTecnico.clicked.connect(self.confirmar_limpeza)
        self.pushButtonSalvarTecnico.clicked.connect(self.confirmar_salvar)
        self.pushButtonCancelarTecnico.clicked.connect(self.close)

    def desativar_campos_execucao(self):
        self.checkBoxResponsavelExecucaoDistinto.setEnabled(False)
        self.labelResponsavelExecucaoProfissional.setEnabled(False)
        self.radioButtonResponsavelExecucaoProfissionalEngCivil.setEnabled(False)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.setEnabled(False)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setEnabled(False)
        self.labelResponsavelExecucaoRegistro.setEnabled(False)
        self.lineEditResponsavelExecucaoRegistro.setEnabled(False)
        self.labelResponsavelExecucaoInscricao.setEnabled(False)
        self.lineEditResponsavelExecucaoInscricao.setEnabled(False)
        self.labelResponsavelExecucaoNome.setEnabled(False)
        self.lineEditResponsavelExecucaoNome.setEnabled(False)
        self.labelResponsavelExecucaoEmail.setEnabled(False)
        self.lineEditResponsavelExecucaoEmail.setEnabled(False)

    def sincronizar_profissionais_distintos(self, checked):
        """Se marcado no Projeto, marca também no Execução"""
        self.checkBoxResponsavelExecucaoDistinto.setChecked(checked)
        self.radioButtonResponsavelExecucaoProfissionalEngCivil.setChecked(False)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.setChecked(False)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setChecked(False)
        self.radioButtonResponsavelExecucaoProfissionalEngCivil.setAutoExclusive(True)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.setAutoExclusive(True)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setAutoExclusive(True)
        self.lineEditResponsavelExecucaoRegistro.clear()
        self.lineEditResponsavelExecucaoInscricao.clear()
        self.lineEditResponsavelExecucaoNome.clear()
        self.lineEditResponsavelExecucaoEmail.clear()

        self.checkBoxResponsavelExecucaoDistinto.setEnabled(True)
        self.labelResponsavelExecucaoProfissional.setEnabled(True)
        self.radioButtonResponsavelExecucaoProfissionalEngCivil.setEnabled(True)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.setEnabled(True)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setEnabled(True)
        self.labelResponsavelExecucaoRegistro.setEnabled(True)
        self.lineEditResponsavelExecucaoRegistro.setEnabled(True)
        self.labelResponsavelExecucaoInscricao.setEnabled(True)
        self.lineEditResponsavelExecucaoInscricao.setEnabled(True)
        self.labelResponsavelExecucaoNome.setEnabled(True)
        self.lineEditResponsavelExecucaoNome.setEnabled(True)
        self.labelResponsavelExecucaoEmail.setEnabled(True)
        self.lineEditResponsavelExecucaoEmail.setEnabled(True)

        # Se for desmarcado, sincroniza os dados de novo
        if not checked:
            self.desativar_campos_execucao()
            self.atualizar_execucao()

    def dessincronizar_profissionais_distintos(self, checked):
        self.checkBoxAutorProjetoDistinto.setChecked(checked)

    def atualizar_execucao(self):
        """Copia os dados de Autor → Execução quando NÃO for distinto"""
        if not self.checkBoxAutorProjetoDistinto.isChecked():


            # Sincronizar radioButtons
            self.radioButtonResponsavelExecucaoProfissionalEngCivil.setChecked(self.radioButtonAutorProjetoProfissionalEngCivil.isChecked())
            self.radioButtonResponsavelExecucaoProfissionalArquitetura.setChecked(self.radioButtonAutorProjetoProfissionalArquitetura.isChecked())
            self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setChecked(self.radioButtonAutorProjetoProfissionalEdificacoes.isChecked())

            # Copiar LineEdits
            self.lineEditResponsavelExecucaoRegistro.setText(self.lineEditAutorProjetoRegistro.text())
            self.lineEditResponsavelExecucaoInscricao.setText(self.lineEditAutorProjetoInscricao.text())
            self.lineEditResponsavelExecucaoNome.setText(self.lineEditAutorProjetoNome.text())
            self.lineEditResponsavelExecucaoEmail.setText(self.lineEditAutorProjetoEmail.text())


    def closeEvent(self, event):
        self.limpar_campos()
        event.accept()  # Permite que a janela seja fechada normalmente

    def atualizar_label_registro_autor_projeto(self):
        if self.radioButtonAutorProjetoProfissionalEngCivil.isChecked():
            self.labelAutorProjetoRegistro.setText("CREA:")
            self.lineEditAutorProjetoRegistro.clear()
            self.lineEditAutorProjetoRegistro.setInputMask("0000000000;_") 
        elif self.radioButtonAutorProjetoProfissionalArquitetura.isChecked():
            self.labelAutorProjetoRegistro.setText("CAU:")
            self.lineEditAutorProjetoRegistro.clear()
            self.lineEditAutorProjetoRegistro.setInputMask("A000000-0;_")
            self.lineEditAutorProjetoRegistro.setText("A")
            self.lineEditAutorProjetoRegistro.setCursorPosition(1)
        elif self.radioButtonAutorProjetoProfissionalEdificacoes.isChecked():
            self.labelAutorProjetoRegistro.setText("CRT:")
            self.lineEditAutorProjetoRegistro.clear()
            self.lineEditAutorProjetoRegistro.setInputMask("000.000.000-00;_") 
        else:
            self.labelAutorProjetoRegistro.setText("Registro:")
            self.lineEditAutorProjetoRegistro.clear()
            self.lineEditAutorProjetoRegistro.setInputMask("")

    def atualizar_label_registro_responsavel_execucao(self):
        if self.radioButtonResponsavelExecucaoProfissionalEngCivil.isChecked():
            self.labelResponsavelExecucaoRegistro.setText("CREA:")
            self.lineEditResponsavelExecucaoRegistro.clear()
            self.lineEditResponsavelExecucaoRegistro.setInputMask("0000000000;_") 
        elif self.radioButtonResponsavelExecucaoProfissionalArquitetura.isChecked():
            self.labelResponsavelExecucaoRegistro.setText("CAU:")
            self.lineEditResponsavelExecucaoRegistro.clear()
            self.lineEditResponsavelExecucaoRegistro.setInputMask("A000000-0;_")
            self.lineEditResponsavelExecucaoRegistro.setText("A")
            self.lineEditResponsavelExecucaoRegistro.setCursorPosition(1)
        elif self.radioButtonResponsavelExecucaoProfissionalEdificacoes.isChecked():
            self.labelResponsavelExecucaoRegistro.setText("CRT:")
            self.lineEditResponsavelExecucaoRegistro.clear()
            self.lineEditResponsavelExecucaoRegistro.setInputMask("000.000.000-00;_") 
        else:
            self.labelResponsavelExecucaoRegistro.setText("Registro:")
            self.lineEditResponsavelExecucaoRegistro.clear()
            self.lineEditResponsavelExecucaoRegistro.setInputMask("")


    def ao_digitar_cpf_cnpj(self):
        texto = self.lineEditRequerenteCPF_CNPJ.text()
        numeros = re.sub(r'\D', '', texto)  # Remove qualquer coisa que não seja número

        if len(numeros) > 11:
            # Configuração como CNPJ
            self.lineEditRequerenteCPF_CNPJ.setInputMask("00.000.000/0000-00;_")
            self.labelRequerenteCPF_CNPJ.setText("CNPJ:")
        
        elif len(numeros) == 11:
            # Configuração como CPF
            self.lineEditRequerenteCPF_CNPJ.setInputMask("000.000.000-00;_")
            self.labelRequerenteCPF_CNPJ.setText("CPF:")
        
        nome = buscar_requerente_por_cpf_cnpj(numeros)
        if nome:
            self.lineEditRequerenteNome.setText(nome)
        else:
            self.lineEditRequerenteNome.clear()
        

    def ao_digitar_registro(self):
        registro = self.lineEditAutorProjetoRegistro.text().strip()
        tecnico = buscar_tecnico_por_registro(registro)

        if tecnico:
            self.lineEditAutorProjetoInscricao.setText(tecnico["nome"])
            self.lineEditAutorProjetoNome.setText(tecnico["inscricao"])
            self.lineEditAutorProjetoEmail.setText(tecnico["email"])
        else:
            self.lineEditAutorProjetoInscricao.clear()
            self.lineEditAutorProjetoNome.clear()
            self.lineEditAutorProjetoEmail.clear()


    def formatar_quadra(self):
        texto = self.lineEditQuadra.text().strip()
        if texto.isdigit():
            self.lineEditQuadra.setText(texto.zfill(4))
        self.atualizar_inscricao()

    def formatar_lote(self):
        texto = self.lineEditLote.text().strip()
        if texto.isdigit():
            self.lineEditLote.setText(texto.zfill(4))
        self.atualizar_inscricao()

    def verificar_unidade(self):
        texto = self.lineEditUnidade.text().strip()
        if texto == '':
            self.lineEditUnidade.setText("0000")
        elif texto.isdigit():
            self.lineEditUnidade.setText(texto.zfill(4))
        self.atualizar_inscricao()

    def atualizar_inscricao(self):
        setor = self.lineEditSetor.text().zfill(2)[:2]
        quadra = self.lineEditQuadra.text().zfill(4)[:4]
        lote = self.lineEditLote.text().zfill(4)[:4]
        unidade = self.lineEditUnidade.text().zfill(4)[:4] if self.lineEditUnidade.text() else '0000'

        inscricao = f"{setor}{quadra}{lote}{unidade}"
        self.lineEditInscricao.setText(inscricao)

    def atualizar_campos_a_partir_da_inscricao(self):
        inscricao = self.lineEditInscricao.text()
        inscricao = re.sub(r'\D', '', inscricao)  # Remove tudo que não for dígito

        if len(inscricao) != 14:
            return  # Aqui você pode emitir um aviso, se desejar

        self.lineEditSetor.setText(inscricao[0:2])
        self.lineEditQuadra.setText(inscricao[2:6])
        self.lineEditLote.setText(inscricao[6:10])
        self.lineEditUnidade.setText(inscricao[10:14])


    def ir_para_aba_processo(self):
        self.tabWidgetCadastrar.setCurrentIndex(0)


    def ir_para_aba_local(self):
        self.tabWidgetCadastrar.setCurrentIndex(1)


    def ir_para_aba_projeto(self):
        self.tabWidgetCadastrar.setCurrentIndex(2)


    def ir_para_aba_tecnico(self):
        self.tabWidgetCadastrar.setCurrentIndex(3)


    def confirmar_limpeza(self):
        '''Pergunta antes de limpar os campos.'''
        reply = QMessageBox.question(
            self,
            "Confirmar Limpeza",
            "Tem certeza que deseja limpar todos os campos?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            self.limpar_campos()


    def limpar_campos(self):
        self.tabWidgetCadastrar.setCurrentIndex(0)

        # Aba Processo
        self.lineEditProcesso.clear()
        self.spinBoxAno.setValue(QDate.currentDate().year())
        self.comboBoxTipoProcesso.setCurrentIndex(0)
        self.dateEditAbertura.setDate(QDate.currentDate())
        self.comboBoxTipoAlvara.setCurrentIndex(0)
        self.lineEditRequerenteCPF_CNPJ.clear()
        self.labelRequerenteCPF_CNPJ.setText("CPF/CNPJ:")
        self.lineEditRequerenteCPF_CNPJ.setInputMask("00000000000000;_") 
        self.lineEditRequerenteNome.clear()

        # Aba Local
        self.lineEditSetor.clear()
        self.lineEditQuadra.clear()
        self.lineEditLote.clear()
        self.lineEditUnidade.setText('0000')
        self.lineEditInscricao.clear()
        self.lineEditLatitudeGraus.setText('23')
        self.lineEditLatitudeMinutos.clear()
        self.lineEditLatitudeSegundos.clear()
        self.lineEditLatitudeSegundosDecimais.setText('00')
        self.lineEditLongitudeGraus.setText('45')
        self.lineEditLongitudeMinutos.clear()
        self.lineEditLongitudeSegundos.clear()
        self.lineEditLongitudeSegundosDecimais.setText('00')
        self.lineEditCEP.clear()
        self.lineEditNomeLogradouro.clear()
        self.lineEditNumPredial.clear()

        # Aba Projeto
        self.checkBoxConstrucao.setChecked(False)
        self.checkBoxAmpliacao.setChecked(False)
        self.checkBoxTransformacao.setChecked(False)
        self.checkBoxRegularizacao.setChecked(False)

        self.comboBoxAtividade.setCurrentIndex(0)
        self.comboBoxAtividadeMista.setCurrentIndex(0)
        self.comboBoxZoneamento.setCurrentIndex(0)
        self.comboBoxMacrozoneamento.setCurrentIndex(0)

        self.lineEditCotaMaisBaixa.clear()
        self.lineEditCotaMaisBaixaDecimais.setText('00')
        self.lineEditCotaMaisAlta.clear()
        self.lineEditCotaMaisAltaDecimais.setText('00')

        # Aba Técnico
        self.radioButtonAutorProjetoProfissionalEngCivil.setChecked(False)
        self.radioButtonAutorProjetoProfissionalArquitetura.setChecked(False)
        self.radioButtonAutorProjetoProfissionalEdificacoes.setChecked(False)
        self.radioButtonAutorProjetoProfissionalEngCivil.setAutoExclusive(False)
        self.radioButtonAutorProjetoProfissionalArquitetura.setAutoExclusive(False)
        self.radioButtonAutorProjetoProfissionalEdificacoes.setAutoExclusive(False)

        self.radioButtonResponsavelExecucaoProfissionalEngCivil.setChecked(False)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.setChecked(False)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setChecked(False)
        self.radioButtonResponsavelExecucaoProfissionalEngCivil.setAutoExclusive(False)
        self.radioButtonResponsavelExecucaoProfissionalArquitetura.setAutoExclusive(False)
        self.radioButtonResponsavelExecucaoProfissionalEdificacoes.setAutoExclusive(False)

        self.lineEditAutorProjetoRegistro.clear()
        self.lineEditAutorProjetoInscricao.clear()
        self.lineEditAutorProjetoNome.clear()
        self.lineEditAutorProjetoEmail.clear()
        
        self.lineEditResponsavelExecucaoRegistro.clear()
        self.lineEditResponsavelExecucaoInscricao.clear()
        self.lineEditResponsavelExecucaoNome.clear()
        self.lineEditResponsavelExecucaoEmail.clear()

        self.checkBoxAutorProjetoDistinto.setChecked(False)
        self.checkBoxResponsavelExecucaoDistinto.setChecked(False)




    def buscar_endereco_por_cep(self, cep):
        import requests

        cep = cep.strip().replace('-', '').replace('.', '')
        if len(cep) != 8 or not cep.isdigit():
            return None

        try:
            response = requests.get(f"https://viacep.com.br/ws/{cep}/json/")
            if response.status_code == 200:
                dados = response.json()
                if "erro" not in dados:
                    return dados
        except Exception as e:
            print(f"Erro ao buscar CEP: {e}")
        return None

    def preencher_logradouro(self):
        cep = self.lineEditCEP.text()
        endereco = self.buscar_endereco_por_cep(cep)
        if endereco:
            self.lineEditNomeLogradouro.setText(endereco.get('logradouro', ''))
        else:
            self.lineEditNomeLogradouro.setText('')

    def dms_para_decimal(self, graus, minutos, segundos, decimais, direcao):
        try:
            graus = int(graus)
            minutos = int(minutos) if minutos else 0
            segundos = int(segundos) if segundos else 0
            decimais = int(decimais) if decimais else 0
        except ValueError:
            return None  # inválido

        decimal = graus + minutos / 60 + (segundos + decimais / 100) / 3600
        if direcao.upper() in ['S', 'O']:
            decimal *= -1
        return decimal

    def _obter_numero_processo(self):
        numero = self.lineEditProcesso.text()
        ano = str(self.spinBoxAno.value()).zfill(4)
        return f"{numero}/{ano}"

    def _obter_ponto_processo(self, inscricao):
        camada_lotes = QgsProject.instance().mapLayersByName("LOTES")
        if camada_lotes:
            camada_lotes = camada_lotes[0]
            expressao = f""""rotulo" = '{inscricao}'"""
            camada_lotes.selectByExpression(expressao)
            selecionados = camada_lotes.selectedFeatures()
            camada_lotes.removeSelection()

            if selecionados:
                poligono = selecionados[0].geometry()
                return poligono.centroid().asPoint()
            else:
                inscricao = inscricao[:10] + '0000'
                expressao = f""""rotulo" = '{inscricao}'"""
                camada_lotes.selectByExpression(expressao)
                selecionados = camada_lotes.selectedFeatures()
                camada_lotes.removeSelection()

                if selecionados:
                    poligono = selecionados[0].geometry()
                    return poligono.centroid().asPoint()

        # Caso não encontre o polígono, usa lat/lon manual
        lat = self.dms_para_decimal(
            self.lineEditLatitudeGraus.text(),
            self.lineEditLatitudeMinutos.text(),
            self.lineEditLatitudeSegundos.text(),
            self.lineEditLatitudeSegundosDecimais.text(),
            'S'
        )
        lon = self.dms_para_decimal(
            self.lineEditLongitudeGraus.text(),
            self.lineEditLongitudeMinutos.text(),
            self.lineEditLongitudeSegundos.text(),
            self.lineEditLongitudeSegundosDecimais.text(),
            'O'
        )

        if lat is None or lon is None:
            return None

        return QgsPointXY(lon, lat), lat, lon

    def _salvar_em_processos_ara(self, camada, ponto, numero_processo):
        feat = QgsFeature(camada.fields())
        feat.setGeometry(QgsGeometry.fromPointXY(ponto))
        feat["numero_processo"] = numero_processo
        feat["tipo_abertura"] = self.comboBoxTipoProcesso.currentText()
        feat["data_abertura"] = self.dateEditAbertura.date().toString("yyyy-MM-dd")
        feat["tipo_alvara"] = self.comboBoxTipoAlvara.currentText()
        return camada.addFeature(feat)

    def _salvar_em_dados_localizacao(self, camada, numero_processo, inscricao, cep, endereco, numero_predial, lat_dms, lon_dms, lat, lon, link_maps, link_street_view):
        feat = QgsFeature(camada.fields())
        feat["numero_processo"] = numero_processo
        feat["latitude_dms"] = lat_dms
        feat["longitude_dms"] = lon_dms
        feat["latitude"] = lat
        feat["longitude"] = lon
        feat["inscricao_imobiliaria"] = inscricao
        feat["cep_endereco"] = cep
        feat["endereco"] = endereco
        feat["numero_predial"] = numero_predial
        feat["link_maps"] = link_maps
        feat["link_street_view"] = link_street_view
        return camada.addFeature(feat)

    def _salvar_em_dados_projeto(self, camada, numero_processo):
        feat = QgsFeature(camada.fields())
        feat["numero_processo"] = numero_processo
        feat["construcao"] = self.checkBoxConstrucao.isChecked()
        feat["ampliacao"] = self.checkBoxAmpliacao.isChecked()
        feat["transformacao"] = self.checkBoxTransformacao.isChecked()
        feat["regularizacao"] = self.checkBoxRegularizacao.isChecked()

        atividade = self.comboBoxAtividade.currentText()
        atividade_misto = self.comboBoxAtividadeMista.currentText()
        zona_principal = self.comboBoxZoneamento.currentText()
        zona_secundaria = self.comboBoxMacrozoneamento.currentText()

        feat["atividade"] = atividade if atividade != "Selecione" else ""
        feat["atividade_misto"] = atividade_misto if atividade_misto != "Selecione" else ""
        feat["zona_principal"] = zona_principal if zona_principal != "Zona adotada" else ""
        feat["zona_secundaria"] = zona_secundaria if zona_secundaria != "Outra zona" else ""

        try:
            feat["nivel_mais_baixo"] = float(f"{self.lineEditCotaMaisBaixa.text()}.{self.lineEditCotaMaisBaixaDecimais.text()}")
        except ValueError:
            feat["nivel_mais_baixo"] = None

        try:
            feat["nivel_mais_alto"] = float(f"{self.lineEditCotaMaisAlta.text()}.{self.lineEditCotaMaisAltaDecimais.text()}")
        except ValueError:
            feat["nivel_mais_alto"] = None

        return camada.addFeature(feat)

    def _salvar_em_requerentes_e_associacao(self, camada_reqs, camada_assoc, cpf_cnpj, nome, numero_processo):
        expr = QgsExpression(f""""cpf_cnpj_requerente" = '{cpf_cnpj}'""")
        req = QgsFeatureRequest(expr)
        cpf_cnpj_existe = any(camada_reqs.getFeatures(req))

        if not cpf_cnpj_existe:
            feat = QgsFeature(camada_reqs.fields())
            feat["cpf_cnpj_requerente"] = cpf_cnpj
            feat["nome_requerente"] = nome
            if not camada_reqs.addFeature(feat):
                return False

        assoc = QgsFeature(camada_assoc.fields())
        assoc["numero_processo"] = numero_processo
        assoc["cpf_cnpj_requerente"] = cpf_cnpj
        return camada_assoc.addFeature(assoc)
    

    def confirmar_salvar(self):
        """Confere preenchimento das abas e pede confirmação antes de salvar."""

        # Verifica campos obrigatórios da aba Processo
        processo_ok = all([
            self.lineEditProcesso.text().strip(),
            self.spinBoxAno.value(),
            self.dateEditAbertura.date().isValid(),
            self.lineEditRequerenteCPF_CNPJ.text().strip(),
            self.lineEditRequerenteNome.text().strip()
        ])

        # Verifica campos obrigatórios da aba Local
        local_ok = all([
            self.lineEditInscricao.text().strip(),
            self.lineEditCEP.text().strip(),
            self.lineEditNomeLogradouro.text().strip(),
            self.lineEditNumPredial.text().strip()
        ])

        # Se Processo ou Local não estiverem completos → erro
        if not processo_ok or not local_ok:
            QMessageBox.warning(
                self,
                "Campos obrigatórios",
                "Preencha todos os campos obrigatórios das abas <b>Processo</b> e <b>Local</b> "
                "antes de salvar o cadastro."
            )
            return

        # Verifica se Projeto e Técnico têm algo preenchido
        tipo_projeto_ok = any([
            self.checkBoxConstrucao.isChecked(),
            self.checkBoxAmpliacao.isChecked(),
            self.checkBoxTransformacao.isChecked(),
            self.checkBoxRegularizacao.isChecked()
        ])

        projeto_ok = all([
            self.comboBoxAtividade.currentIndex() != 0,
            self.comboBoxZoneamento.currentIndex() != 0,
            self.comboBoxMacrozoneamento.currentIndex() != 0,
            self.lineEditCotaMaisBaixa.text().strip(),
            self.lineEditCotaMaisAlta.text().strip()
        ])

        autor_tecnico_ok = any([
            self.radioButtonAutorProjetoProfissionalEngCivil.isChecked(),
            self.radioButtonAutorProjetoProfissionalArquitetura.isChecked(),
            self.radioButtonAutorProjetoProfissionalEdificacoes.isChecked()
        ])

        responsavel_tecnico_ok = any([
            self.radioButtonResponsavelExecucaoProfissionalEngCivil.isChecked(),
            self.radioButtonResponsavelExecucaoProfissionalArquitetura.isChecked(),
            self.radioButtonResponsavelExecucaoProfissionalEdificacoes.isChecked()
        ])

        tecnico_ok = all([
            self.lineEditAutorProjetoRegistro.text().strip(),
            self.lineEditAutorProjetoInscricao.text().strip(),
            self.lineEditAutorProjetoNome.text().strip(),
            self.lineEditAutorProjetoEmail.text().strip(),
            self.lineEditResponsavelExecucaoRegistro.text().strip(),
            self.lineEditResponsavelExecucaoInscricao.text().strip(),
            self.lineEditResponsavelExecucaoNome.text().strip(),
            self.lineEditResponsavelExecucaoEmail.text().strip()
        ])

        if not tipo_projeto_ok or not projeto_ok or not autor_tecnico_ok or not responsavel_tecnico_ok or not tecnico_ok:
            reply = QMessageBox.question(
                self,
                "Confirmação",
                "As abas <b>Projeto</b> e/ou <b>Técnico</b> não estão totalmente preenchidas.\n\n"
                "Deseja continuar mesmo assim?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            if reply == QMessageBox.No:
                return

        # Se passou pelas verificações → salvar de fato
        self.salvar_dados_processo()

    def salvar_dados_processo(self):
        numero_processo = self._obter_numero_processo()
        inscricao = self.lineEditInscricao.text().strip()
        cep = self.lineEditCEP.text().strip()
        endereco = self.lineEditNomeLogradouro.text().strip()
        numero_predial = self.lineEditNumPredial.text().strip()
        cpf_cnpj = re.sub(r'\D', '', self.lineEditRequerenteCPF_CNPJ.text().strip())
        nome = self.lineEditRequerenteNome.text().strip()
        lat_dms = self.lineEditLatitudeGraus.text()+"°"+self.lineEditLatitudeMinutos.text()+"'"+self.lineEditLatitudeSegundos.text()+','+self.lineEditLatitudeSegundosDecimais.text()+'"'+'S'
        lon_dms = self.lineEditLongitudeGraus.text()+"°"+self.lineEditLongitudeMinutos.text()+"'"+self.lineEditLongitudeSegundos.text()+','+self.lineEditLongitudeSegundosDecimais.text()+'"'+'O'

        ponto_latlon = self._obter_ponto_processo(inscricao)
        if not ponto_latlon:
            QMessageBox.critical(self, "Erro", "Não foi possível obter coordenadas.")
            return
        elif isinstance(ponto_latlon, tuple):
            ponto, lat, lon = ponto_latlon
        else:
            ponto = ponto_latlon
            lat = ponto.y()
            lon = ponto.x()

        link_maps = "https://www.google.com/maps?q="+str(self.dms_para_decimal(
            self.lineEditLatitudeGraus.text(),
            self.lineEditLatitudeMinutos.text(),
            self.lineEditLatitudeSegundos.text(),
            self.lineEditLatitudeSegundosDecimais.text(),
            'S'))+","+str(self.dms_para_decimal(
            self.lineEditLongitudeGraus.text(),
            self.lineEditLongitudeMinutos.text(),
            self.lineEditLongitudeSegundos.text(),
            self.lineEditLongitudeSegundosDecimais.text(),
            'O'))
        link_street_view = "https://www.google.com/maps/@?api=1&map_action=pano&viewpoint="+str(self.dms_para_decimal(
            self.lineEditLatitudeGraus.text(),
            self.lineEditLatitudeMinutos.text(),
            self.lineEditLatitudeSegundos.text(),
            self.lineEditLatitudeSegundosDecimais.text(),
            'S'))+","+str(self.dms_para_decimal(
            self.lineEditLongitudeGraus.text(),
            self.lineEditLongitudeMinutos.text(),
            self.lineEditLongitudeSegundos.text(),
            self.lineEditLongitudeSegundosDecimais.text(),
            'O'))

        # Camadas
        camadas = {
            "processos_ara": QgsProject.instance().mapLayersByName("processos_ara"),
            "dados_localizacao": QgsProject.instance().mapLayersByName("dados_localizacao"),
            "dados_projeto": QgsProject.instance().mapLayersByName("dados_projeto"),
            "requerentes": QgsProject.instance().mapLayersByName("requerentes"),
            "processo_requerente": QgsProject.instance().mapLayersByName("processo_requerente"),
            "tecnicos": QgsProject.instance().mapLayersByName("tecnicos"),
            "processo_tecnicos": QgsProject.instance().mapLayersByName("processo_tecnicos"),
        }

        if not all(camadas.values()):
            QMessageBox.critical(self, "Erro", "Uma ou mais camadas obrigatórias não foram carregadas.")
            return

        # Desempacota as camadas
        camada_proc = camadas["processos_ara"][0]
        camada_local = camadas["dados_localizacao"][0]
        camada_proj = camadas["dados_projeto"][0]
        camada_reqs = camadas["requerentes"][0]
        camada_assoc = camadas["processo_requerente"][0]
        camada_tec = camadas["tecnicos"][0]
        camada_resps = camadas["processo_tecnicos"][0]
        
        # Inicia edição
        for camada in [camada_proc, camada_local, camada_proj, camada_reqs, camada_assoc]:
            camada.startEditing()

        try:
            ok1 = self._salvar_em_processos_ara(
                camada_proc,
                ponto,
                numero_processo
            )
            ok2 = self._salvar_em_dados_localizacao(
                camada_local,
                numero_processo,
                inscricao,
                cep,
                endereco,
                numero_predial,
                lat_dms,
                lon_dms,
                lat,
                lon,
                link_maps,
                link_street_view
            )
            ok3 = self._salvar_em_dados_projeto(
                camada_proj,
                numero_processo
            )
            ok4 = self._salvar_em_requerentes_e_associacao(
                camada_reqs,
                camada_assoc,
                cpf_cnpj,
                nome,
                numero_processo
            )
            # ok5 = self._salvar_em_tecnicos_e_associacao(self, camada_tec, camada_resps, )

            if all([ok1, ok2, ok3, ok4]):
                for camada in [camada_proc, camada_local, camada_proj, camada_reqs, camada_assoc]:
                    camada.commitChanges()
                    camada.triggerRepaint()
                QMessageBox.information(self, "Sucesso", "Dados salvos com sucesso.")
                self.close()
            else:
                raise Exception("Erro ao adicionar uma ou mais feições.")
        except Exception as e:
            for camada in [camada_proc, camada_local, camada_proj, camada_reqs, camada_assoc]:
                camada.rollBack()
            QMessageBox.critical(self, "Erro", f"Erro ao salvar dados: {str(e)}")