# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GerenciadorARADialog
                                 A QGIS plugin
 Este plugin auxilia no gerenciamento de banco de dados de Alvarás Responsáveis Automáticos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-17
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Hiago Cardoso Arquitetura e Urbanismo
        email                : hiagocardoso.arq@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import re
import requests
import math

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsFeature, QgsGeometry, QgsPointXY, QgsExpression, QgsFeatureRequest
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMessageBox
from .ara_manager_dialog_cadastrar_ui import Ui_GerenciadorARADialogBase
from . import resources_rc
from .utils import buscar_requerente_por_cpf

class CadastroARADialog(QtWidgets.QDialog, Ui_GerenciadorARADialogBase):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

        # Preencher o ano atual no spinBoxAno e definir intervalo
        ano_atual = QDate.currentDate().year()
        self.spinBoxAno.setValue(ano_atual)
        self.spinBoxAno.setRange(1900, ano_atual)

        # Atualiza o campo de data    
        self.dateEditAbertura.setDate(QDate.currentDate())

        self.radioButtonProjetoEngCivil.toggled.connect(self.atualizar_label_registro)
        self.radioButtonProjetoArquitetura.toggled.connect(self.atualizar_label_registro)
        self.radioButtonProjetoEdificacoes.toggled.connect(self.atualizar_label_registro)

        # Conecta sinais
        self.lineEditRequerenteCPF.textChanged.connect(self.ao_digitar_cpf)

        # formata os dígitos da inscrição digitados
        self.lineEditQuadra.editingFinished.connect(self.formatar_quadra)
        self.lineEditLote.editingFinished.connect(self.formatar_lote)
        self.lineEditUnidade.editingFinished.connect(self.verificar_unidade)

        # atualiza inscrição após digitação
        self.lineEditSetor.textChanged.connect(self.atualizar_inscricao)
        self.lineEditQuadra.textChanged.connect(self.atualizar_inscricao)
        self.lineEditLote.textChanged.connect(self.atualizar_inscricao)
        self.lineEditUnidade.textChanged.connect(self.atualizar_inscricao)

        self.lineEditInscricaoImobiliaria.editingFinished.connect(self.atualizar_campos_a_partir_da_inscricao)

        self.lineEditCEP.editingFinished.connect(self.preencher_logradouro)

        self.commandLinkButtonCadastrar.clicked.connect(self.salvar_dados_processo)

        # Botões de navegação entre abas e de cancelamento
        self.commandLinkButtonAvancarLocal.clicked.connect(self.ir_para_aba_local)
        self.commandLinkButtonCancelarProcesso.clicked.connect(self.close)

        self.commandLinkButtonVoltarProcesso.clicked.connect(self.ir_para_aba_processo)
        self.commandLinkButtonAvancarProjeto.clicked.connect(self.ir_para_aba_projeto)
        self.commandLinkButtonCancelarLocal.clicked.connect(self.close)

        self.commandLinkButtonVoltarLocal.clicked.connect(self.ir_para_aba_local)
        self.commandLinkButtonAvancarTecnico.clicked.connect(self.ir_para_aba_tecnico)
        self.commandLinkButtonCancelarProjeto.clicked.connect(self.close)

        self.commandLinkButtonVoltarProjeto.clicked.connect(self.ir_para_aba_projeto)
        self.commandLinkButtonCancelarTecnico.clicked.connect(self.close)


        self.checkBoxExecucao.stateChanged.connect(self.preencher_dados_responsavel)


    def closeEvent(self, event):
        self.limpar_campos()
        event.accept()  # Permite que a janela seja fechada normalmente

    def atualizar_label_registro(self):
        if self.radioButtonProjetoEngCivil.isChecked():
            self.labelProjetoRegistro.setText("CREA:")
            self.lineEditProjetoRegistro.clear()
            self.lineEditProjetoRegistro.setInputMask("0000000000;_") 
        elif self.radioButtonProjetoArquitetura.isChecked():
            self.labelProjetoRegistro.setText("CAU:")
            self.lineEditProjetoRegistro.clear()
            self.lineEditProjetoRegistro.setInputMask("A000000-0;_")
            self.lineEditProjetoRegistro.setText("A")
            self.lineEditProjetoRegistro.setCursorPosition(1)
        elif self.radioButtonProjetoEdificacoes.isChecked():
            self.labelProjetoRegistro.setText("CRT:")
            self.lineEditProjetoRegistro.clear()
            self.lineEditProjetoRegistro.setInputMask("000.000.000-00;_") 
        else:
            self.labelProjetoRegistro.setText("Registro:")
            self.lineEditProjetoRegistro.clear()
            self.lineEditProjetoRegistro.setInputMask("")

        if self.radioButtonExecucaoEngCivil.isChecked():
            self.labelExecucaoRegistro.setText("CREA:")
            self.lineEditExecucaoRegistro.clear()
            self.lineEditExecucaoRegistro.setInputMask("0000000000;_") 
        elif self.radioButtonExecucaoArquitetura.isChecked():
            self.labelExecucaoRegistro.setText("CAU:")
            self.lineEditExecucaoRegistro.clear()
            self.lineEditExecucaoRegistro.setInputMask("A000000-0;_")
            self.lineEditExecucaoRegistro.setText("A")
            self.lineEditExecucaoRegistro.setCursorPosition(1)
        elif self.radioButtonExecucaoEdificacoes.isChecked():
            self.labelExecucaoRegistro.setText("CRT:")
            self.lineEditExecucaoRegistro.clear()
            self.lineEditExecucaoRegistro.setInputMask("000.000.000-00;_") 
        else:
            self.labelExecucaoRegistro.setText("Registro:")
            self.lineEditExecucaoRegistro.clear()
            self.lineEditExecucaoRegistro.setInputMask("")

    def ao_digitar_cpf(self):
        texto = self.lineEditRequerenteCPF.text()
        cpf = re.sub(r'\D', '', texto)  # Remove qualquer coisa que não seja número

        if len(cpf) == 11:
            nome = buscar_requerente_por_cpf(cpf)
            if nome:
                self.lineEditRequerenteNome.setText(nome)
            else:
                self.lineEditRequerenteNome.clear()

    def formatar_quadra(self):
        texto = self.lineEditQuadra.text().strip()
        if texto.isdigit():
            self.lineEditQuadra.setText(texto.zfill(4))
        self.atualizar_inscricao()

    def formatar_lote(self):
        texto = self.lineEditLote.text().strip()
        if texto.isdigit():
            self.lineEditLote.setText(texto.zfill(4))
        self.atualizar_inscricao()

    def verificar_unidade(self):
        texto = self.lineEditUnidade.text().strip()
        if texto == '':
            self.lineEditUnidade.setText("0000")
        elif texto.isdigit():
            self.lineEditUnidade.setText(texto.zfill(4))
        self.atualizar_inscricao()

    def atualizar_inscricao(self):
        setor = self.lineEditSetor.text().zfill(2)[:2]
        quadra = self.lineEditQuadra.text().zfill(4)[:4]
        lote = self.lineEditLote.text().zfill(4)[:4]
        unidade = self.lineEditUnidade.text().zfill(4)[:4] if self.lineEditUnidade.text() else '0000'

        inscricao = f"{setor}{quadra}{lote}{unidade}"
        self.lineEditInscricaoImobiliaria.setText(inscricao)

    def atualizar_campos_a_partir_da_inscricao(self):
        inscricao = self.lineEditInscricaoImobiliaria.text()
        inscricao = re.sub(r'\D', '', inscricao)  # Remove tudo que não for dígito

        if len(inscricao) != 14:
            return  # Aqui você pode emitir um aviso, se desejar

        self.lineEditSetor.setText(inscricao[0:2])
        self.lineEditQuadra.setText(inscricao[2:6])
        self.lineEditLote.setText(inscricao[6:10])
        self.lineEditUnidade.setText(inscricao[10:14])


    def ir_para_aba_processo(self):
        self.tabWidgetCadastrar.setCurrentIndex(0)


    def ir_para_aba_local(self):
        self.tabWidgetCadastrar.setCurrentIndex(1)


    def ir_para_aba_projeto(self):
        self.tabWidgetCadastrar.setCurrentIndex(2)


    def ir_para_aba_tecnico(self):
        self.tabWidgetCadastrar.setCurrentIndex(3)


    def preencher_dados_responsavel(self):
        if self.checkBoxExecucao.isChecked():

            # Copiar o tipo de responsabilidade técnica
            if self.radioButtonProjetoEngCivil.isChecked():
                self.radioButtonExecucaoEngCivil.setChecked(True)
            elif self.radioButtonProjetoArquitetura.isChecked():
                self.radioButtonExecucaoArquitetura.setChecked(True)
            elif self.radioButtonProjetoEdificacoes.isChecked():
                self.radioButtonExecucaoEdificacoes.setChecked(True)

            # Copiar o gênero
            if self.radioButtonProjetoFeminino.isChecked():
                self.radioButtonExecucaoFeminino.setChecked(True)
            elif self.radioButtonProjetoMasculino.isChecked():
                self.radioButtonExecucaoMasculino.setChecked(True)

            # Copiar os campos de texto
            self.lineEditExecucaoRegistro.setText(self.lineEditProjetoRegistro.text())
            self.lineEditExecucaoInscricao.setText(self.lineEditProjetoInscricao.text())
            self.lineEditExecucaoNome.setText(self.lineEditProjetoNome.text())
            self.lineEditExecucaoEmail.setText(self.lineEditProjetoEmail.text())



        else:
            # Limpar os campos da Execução se o checkbox for desmarcado
            self.lineEditExecucaoRegistro.clear()
            self.lineEditExecucaoInscricao.clear()
            self.lineEditExecucaoNome.clear()
            self.lineEditExecucaoEmail.clear()

            self.radioButtonExecucaoEngCivil.setAutoExclusive(False)
            self.radioButtonExecucaoArquitetura.setAutoExclusive(False)
            self.radioButtonExecucaoEdificacoes.setAutoExclusive(False)
            self.radioButtonExecucaoEngCivil.setChecked(False)
            self.radioButtonExecucaoArquitetura.setChecked(False)
            self.radioButtonExecucaoEdificacoes.setChecked(False)
            self.radioButtonExecucaoEngCivil.setAutoExclusive(True)
            self.radioButtonExecucaoArquitetura.setAutoExclusive(True)
            self.radioButtonExecucaoEdificacoes.setAutoExclusive(True)

            self.radioButtonExecucaoFeminino.setAutoExclusive(False)
            self.radioButtonExecucaoMasculino.setAutoExclusive(False)
            self.radioButtonExecucaoFeminino.setChecked(False)
            self.radioButtonExecucaoMasculino.setChecked(False)
            self.radioButtonExecucaoFeminino.setAutoExclusive(True)
            self.radioButtonExecucaoMasculino.setAutoExclusive(True)

            self.labelExecucaoRegistro.setText("Registro:")
            self.lineEditExecucaoRegistro.setInputMask("")


    def limpar_campos(self):
        self.tabWidgetCadastrar.setCurrentIndex(0)

        # Aba Processo
        self.lineEditProcesso.clear()
        self.spinBoxAno.setValue(QDate.currentDate().year())
        self.comboBoxTipoProcesso.setCurrentIndex(0)
        self.dateEditAbertura.setDate(QDate.currentDate())
        self.comboBoxTipoAlvara.setCurrentIndex(0)
        self.lineEditRequerenteCPF.clear()
        self.lineEditRequerenteNome.clear()

        # Aba Local
        self.lineEditSetor.clear()
        self.lineEditQuadra.clear()
        self.lineEditLote.clear()
        self.lineEditUnidade.setText('0000')
        self.lineEditInscricaoImobiliaria.clear()
        self.lineEditLatitudeGraus.setText('23')
        self.lineEditLatitudeMinutos.clear()
        self.lineEditLatitudeSegundos.clear()
        self.lineEditLatitudeSegundosDecimais.setText('00')
        self.lineEditLongitudeGraus.setText('45')
        self.lineEditLongitudeMinutos.clear()
        self.lineEditLongitudeSegundos.clear()
        self.lineEditLongitudeSegundosDecimais.setText('00')
        self.lineEditCEP.clear()
        self.lineEditNomeLogradouro.clear()
        self.lineEditNumeroPredial.clear()

        # Aba Projeto
        self.checkBoxConstrucao.setChecked(False)
        self.checkBoxAmpliacao.setChecked(False)
        self.checkBoxTransformacao.setChecked(False)
        self.checkBoxRegularizacao.setChecked(False)

        self.comboBoxAtividade.setCurrentIndex(0)
        self.comboBoxAtividadeMista.setCurrentIndex(0)
        self.comboBoxZoneamentoAdotado.setCurrentIndex(0)
        self.comboBoxZoneamentoSecundario.setCurrentIndex(0)

        self.lineEditCotaMaisBaixa.clear()
        self.lineEditCotaMaisBaixaDecimais.clear()
        self.lineEditCotaMaisAlta.clear()
        self.lineEditCotaMaisAltaDecimais.clear()

    def buscar_endereco_por_cep(self, cep):
        import requests

        cep = cep.strip().replace('-', '').replace('.', '')
        if len(cep) != 8 or not cep.isdigit():
            return None

        try:
            response = requests.get(f"https://viacep.com.br/ws/{cep}/json/")
            if response.status_code == 200:
                dados = response.json()
                if "erro" not in dados:
                    return dados
        except Exception as e:
            print(f"Erro ao buscar CEP: {e}")
        return None

    def preencher_logradouro(self):
        cep = self.lineEditCEP.text()
        endereco = self.buscar_endereco_por_cep(cep)
        if endereco:
            self.lineEditNomeLogradouro.setText(endereco.get('logradouro', ''))
        else:
            self.lineEditNomeLogradouro.setText('')

    def dms_para_decimal(graus, minutos, segundos, decimais, direcao):
        try:
            graus = int(graus)
            minutos = int(minutos)
            segundos = int(segundos)
            decimais = int(decimais)
        except ValueError:
            return None  # inválido

        decimal = graus + minutos / 60 + (segundos + decimais / 100) / 3600
        if direcao.upper() in ['S', 'O']:
            decimal *= -1
        return decimal

    def _obter_numero_processo(self):
        numero = self.lineEditProcesso.text()
        ano = str(self.spinBoxAno.value()).zfill(4)
        return f"{numero}/{ano}"

    def _obter_ponto_processo(self, inscricao):
        camada_lotes = QgsProject.instance().mapLayersByName("LOTES")
        if camada_lotes:
            camada_lotes = camada_lotes[0]
            expressao = f""""rotulo" = '{inscricao}'"""
            camada_lotes.selectByExpression(expressao)
            selecionados = camada_lotes.selectedFeatures()
            camada_lotes.removeSelection()

            if selecionados:
                poligono = selecionados[0].geometry()
                return poligono.centroid().asPoint()

        # Caso não encontre o polígono, usa lat/lon manual
        lat = dms_para_decimal(
            self.lineEditLatitudeGraus.text(),
            self.lineEditLatitudeMinutos.text(),
            self.lineEditLatitudeSegundos.text(),
            self.lineEditLatitudeSegundosDecimais.text(),
            'S'
        )
        lon = dms_para_decimal(
            self.lineEditLongitudeGraus.text(),
            self.lineEditLongitudeMinutos.text(),
            self.lineEditLongitudeSegundos.text(),
            self.lineEditLongitudeSegundosDecimais.text(),
            'O'
        )

        if lat is None or lon is None:
            return None

        return QgsPointXY(lon, lat), lat, lon

    def _salvar_em_processos_ara(self, camada, ponto, numero_processo):
        feat = QgsFeature(camada.fields())
        feat.setGeometry(QgsGeometry.fromPointXY(ponto))
        feat["numero_processo"] = numero_processo
        feat["tipo_abertura"] = self.comboBoxTipoProcesso.currentText()
        feat["data_abertura"] = self.dateEditAbertura.date().toString("yyyy-MM-dd")
        feat["tipo_alvara"] = self.comboBoxTipoAlvara.currentText()
        return camada.addFeature(feat)

    def _salvar_em_dados_localizacao(self, camada, numero_processo, inscricao, cep, endereco, numero_predial, lat, lon):
        feat = QgsFeature(camada.fields())
        feat["numero_processo"] = numero_processo
        feat["latitude"] = lat
        feat["longitude"] = lon
        feat["inscricao_imobiliaria"] = inscricao
        feat["cep_endereco"] = cep
        feat["endereco"] = endereco
        feat["numero_predial"] = numero_predial
        return camada.addFeature(feat)

    def _salvar_em_dados_projeto(self, camada, numero_processo):
        feat = QgsFeature(camada.fields())
        feat["numero_processo"] = numero_processo
        feat["construcao"] = self.checkBoxConstrucao.isChecked()
        feat["ampliacao"] = self.checkBoxAmpliacao.isChecked()
        feat["transformacao"] = self.checkBoxTransformacao.isChecked()
        feat["regularizacao"] = self.checkBoxRegularizacao.isChecked()

        atividade = self.comboBoxAtividade.currentText()
        atividade_misto = self.comboBoxAtividadeMista.currentText()
        zona_principal = self.comboBoxZoneamentoAdotado.currentText()
        zona_secundaria = self.comboBoxZoneamentoSecundario.currentText()

        feat["atividade"] = atividade if atividade != "Selecione" else ""
        feat["atividade_misto"] = atividade_misto if atividade_misto != "Selecione" else ""
        feat["zona_principal"] = zona_principal if zona_principal != "Zona adotada" else ""
        feat["zona_secundaria"] = zona_secundaria if zona_secundaria != "Outra zona" else ""

        try:
            feat["nivel_mais_baixo"] = float(f"{self.lineEditCotaMaisBaixa.text()}.{self.lineEditCotaMaisBaixaDecimais.text()}")
        except ValueError:
            feat["nivel_mais_baixo"] = None

        try:
            feat["nivel_mais_alto"] = float(f"{self.lineEditCotaMaisAlta.text()}.{self.lineEditCotaMaisAltaDecimais.text()}")
        except ValueError:
            feat["nivel_mais_alto"] = None

        return camada.addFeature(feat)

    def _salvar_em_requerentes_e_associacao(self, camada_reqs, camada_assoc, cpf, nome, numero_processo):
        expr = QgsExpression(f""""cpf_requerente" = '{cpf}'""")
        req = QgsFeatureRequest(expr)
        cpf_existe = any(camada_reqs.getFeatures(req))

        if not cpf_existe:
            feat = QgsFeature(camada_reqs.fields())
            feat["cpf_requerente"] = cpf
            feat["nome_requerente"] = nome
            if not camada_reqs.addFeature(feat):
                return False

        assoc = QgsFeature(camada_assoc.fields())
        assoc["numero_processo"] = numero_processo
        assoc["cpf_requerente"] = cpf
        return camada_assoc.addFeature(assoc)

    def salvar_dados_processo(self):
        numero_processo = self._obter_numero_processo()
        inscricao = self.lineEditInscricaoImobiliaria.text().strip()
        cep = self.lineEditCEP.text().strip()
        endereco = self.lineEditNomeLogradouro.text().strip()
        numero_predial = self.lineEditNumeroPredial.text().strip()
        cpf = self.lineEditRequerenteCPF.text().strip()
        nome = self.lineEditRequerenteNome.text().strip()

        ponto_latlon = self._obter_ponto_processo(inscricao)
        if not ponto_latlon:
            QMessageBox.critical(self, "Erro", "Não foi possível obter coordenadas.")
            return
        elif isinstance(ponto_latlon, tuple):
            ponto, lat, lon = ponto_latlon
        else:
            ponto = ponto_latlon
            lat = ponto.y()
            lon = ponto.x()

        # Camadas
        camadas = {
            "processos_ara": QgsProject.instance().mapLayersByName("processos_ara"),
            "dados_localizacao": QgsProject.instance().mapLayersByName("dados_localizacao"),
            "dados_projeto": QgsProject.instance().mapLayersByName("dados_projeto"),
            "requerentes": QgsProject.instance().mapLayersByName("requerentes"),
            "processo_requerente": QgsProject.instance().mapLayersByName("processo_requerente"),
        }

        if not all(camadas.values()):
            QMessageBox.critical(self, "Erro", "Uma ou mais camadas obrigatórias não foram carregadas.")
            return

        # Desempacota as camadas
        camada_proc = camadas["processos_ara"][0]
        camada_local = camadas["dados_localizacao"][0]
        camada_proj = camadas["dados_projeto"][0]
        camada_reqs = camadas["requerentes"][0]
        camada_assoc = camadas["processo_requerente"][0]

        # Inicia edição
        for camada in [camada_proc, camada_local, camada_proj, camada_reqs, camada_assoc]:
            camada.startEditing()

        try:
            ok1 = self._salvar_em_processos_ara(camada_proc, ponto, numero_processo)
            ok2 = self._salvar_em_dados_localizacao(camada_local, numero_processo, inscricao, cep, endereco, numero_predial, lat, lon)
            ok3 = self._salvar_em_dados_projeto(camada_proj, numero_processo)
            ok4 = self._salvar_em_requerentes_e_associacao(camada_reqs, camada_assoc, cpf, nome, numero_processo)

            if all([ok1, ok2, ok3, ok4]):
                for camada in [camada_proc, camada_local, camada_proj, camada_reqs, camada_assoc]:
                    camada.commitChanges()
                    camada.triggerRepaint()
                QMessageBox.information(self, "Sucesso", "Dados salvos com sucesso.")
            else:
                raise Exception("Erro ao adicionar uma ou mais feições.")
        except Exception as e:
            for camada in [camada_proc, camada_local, camada_proj, camada_reqs, camada_assoc]:
                camada.rollBack()
            QMessageBox.critical(self, "Erro", f"Erro ao salvar dados: {str(e)}")