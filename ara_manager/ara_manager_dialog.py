# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GerenciadorARADialog
                                 A QGIS plugin
 Este plugin auxilia no gerenciamento de banco de dados de Alvarás Responsáveis Automáticos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-17
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Hiago Cardoso Arquitetura e Urbanismo
        email                : hiagocardoso.arq@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
import re
from .utils import buscar_requerente_por_cpf

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ara_manager_dialog_base.ui'))


class GerenciadorARADialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GerenciadorARADialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.lineEditRequerenteCPF.textChanged.connect(self.ao_digitar_cpf)

        self.commandLinkButtonAvancarLocal.clicked.connect(self.ir_para_aba_local)


    def ao_digitar_cpf(self):
        texto = self.lineEditRequerenteCPF.text()
        cpf = re.sub(r'\D', '', texto)  # Remove tudo que não for dígito
        if len(cpf) == 11:
            nome = buscar_requerente_por_cpf(cpf)
            if nome:
                self.lineEditRequerenteNome.setText(nome)
            else:
                self.lineEditRequerenteNome.clear()


    def ir_para_aba_local(self):
        self.tabWidgetCadastrar.setCurrentIndex(1)  # Índice 1 assume que a aba "Local" é a segunda aba